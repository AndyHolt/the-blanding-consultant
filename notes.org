* Current status
- Have created a file with names of Wodehouse characters from Wikipedia page
  https://en.wikipedia.org/wiki/List_of_P._G._Wodehouse_characters,
  =wodehouse-characters.txt=
- Have done a basic model training on this using =textgenrnn= library in python.
- Using a small dataset, multiple epochs improves training, I have so far tried
  1 (not great results) and 10 (good results!). And it only took a few minutes
  to train to 10 epochs.
- I tried training on 100 epochs, but simply reproduces training data.

Next steps:
- [X] Read articles on =textgenrnn= and tensorflow to understand a little better
- [X] See if generation can happen faster? (Marked as complete because
  generation seems fast enough for now)
- [X] Work out interface for simply requesting a name and getting it back
- [X] Turn interface into a flask app
- [X] Add processing of url parameters to set absurdity level and name beginning
- [X] Write frontend with React, and possibly React
- [X] Allow in frontend the addition of a beginning, e.g. to input a first name
  and receive a full character name.
- [X] Make "advanced options" section collapsible
- [X] Try to add a status indicator when fetching data from backend: use
  react-spinners, try PulseLoader or SyncLoader.
- [X] Improve styling of "Give name" button to make it more obviously the main
  interactive component
- [X] Set up general styling of page in Art Deco style
  - A nice Art Deco button design: [[https://codepen.io/mr-tamagotchi/pen/yzRQba][Art Deco Button]]
- [X] Make names appear as cards: need to fix scrolling, and improve card design
- [ ] Style elements of advanced options (input box and select)
- [X] Set style of links in CSS, including colour of links after clicking
- [X] Create better favicon and logo (bowler hat?)
- [X] Write footer text, to include links to Github (and blog post?)
- [X] Check responsive design on different screen sizes
- [X] Deploy to web
- [ ] Write blog post
- [ ] Perhaps make user controls fixed on page, rather than floating down and up
  depending on what results there are to display? The advantage of floating is
  that it makes the page always a little better balanced. The advantage of
  staying in the same place is that one doesn't need to move the pointer to
  click the "Give name" button more than once when generating multiple names.
  This is likely the better behaviour.
- [ ] Reduce gap at bottom of page when result table is too tall to fit in page
- [ ] Try to animate the opening and closing of the advanced options section
- [ ] Add a dark mode, see [[https://blog.logrocket.com/dark-mode-react-in-depth-guide/][Dark mode in React: An in-depth guide - LogRocket
  Blog]].
- [ ] Put an art-deco pattern behind the heading to make header section stand
  out a bit more
- [ ] Deal with hitting "Enter" key in prefix input field (ideally make this
  equivalent to clicking the button)
- [ ] Make interface work better for touchscreens, especially in how the main
  button operates. Its present set up works well in mouse-driven environment,
  but not so well for touchscreen use.
  
* Issues and technical notes
To get =textgenrnn= to load in python, I had to edit a core file, even after
installing directly from github!

File is /usr/local/lib/python3.11/site-packages/textgenrnn/textgenrnn.py

Update, <2023-08-24 Thu 01:21>: After setting up a venv, the same file in a
different location needs the same modifications. This results in a more
significant problem when it comes time to deploy the app for production, because
a modified version of the textgenrnn package needs to be used, which cannot be
automatically installed based on a =requirements.txt= file. An elegant solution
would be to fork the package, make the modified changes and have
=requirements.txt= install that forked package from Github. That may be a better
solution to enact at some point. But for now, the best solution is simply to
copy textgenrnn into a new directory in the app directory, thus making it a
package with loading priority over the properly installed one. Ensure this
directory gets uploaded for production, and voila!

Update, <2023-08-24 Thu 10:43>: Google cloud app engine only offers cpu, not gpu
access. So see if it runs better using the cpu optimised Tensorflow package

Modifications (Tuesday 15th August 2023 PM):
1. comment out line 5: ~from tensorflow.keras.utils import multi_gpu_model~
2. Change line 14 from ~from keras.backend.tensorflow_backend import set_session~
   to ~from tensorflow.python.keras.backend import set_session~
3. Have also on Wednesday 16th August 2023 modified, in same file, line ~from
   tensorflow.keras.optimizers import Adam~ to ~from
   tensorflow.keras.optimizers.legacy import Adam~

Another issue is to do with training data. Though Wodehouse was prolific as an
author, the total data when using the characters from his writings is very
limited, 7,328 character sequences in 415 texts, compared to the 100,000+
characters generally required for training a good model. The solution is to use
the ~textgenrnn~ library to give a starting point of a model trained on general
English text, and then use the limited data of character names to tune this
general text-generation model for Wodehouse style names. Provided the training
amount gets the right balance, this appears an effective method.

Background information on =textgenrnn= found at:
https://minimaxir.com/2018/05/text-neural-networks/.

Article on RNNs: http://karpathy.github.io/2015/05/21/rnn-effectiveness/

Keras machine learning for humans python library (built on tensorflow): https://github.com/keras-team/keras

Tensorflow machine learning library: https://github.com/tensorflow/tensorflow


A major difficulty in getting the API running on google cloud was that the high
memory use was causing the supervisor to shut down the app before a response
was given, making the whole thing both completely non-working and difficult to
debug. Eventually, I managed to find an error message from the Google Cloud App
Engine dashboard with enough information to have a clue what was going on.
Significantly, I couldn't actually read the message in the App Engine dashboard!
I had to copy the body of the message to clip board, paste it into Emacs, and
only then could I actually get any information about what was going on. Since
the app was taking up too much memory, this led me to look closely at the memory
usage, and I discovered a memory leak. This was difficult to diagnose, because
it appeared not to be a single object taking up lots of memory (tracemalloc
therefore did not help), but many, many small objects each using a small amount
of memory, building up. The solution was to use keras to clean up in between
each name generation:
#+begin_src python
  tf.keras.backend.clear_session()
  gc.collect()
#+end_src
 this seems to have stopped the memory allocation from
growing, though it is still fairly high, around 265 MB of memory required. But
at least now it is a stable amount, and I can begin working out how to get this
running in Google Cloud App Engine.

Most helpful tutorial I have found on deploying to Google Cloud App Engine:
[[https://medium.com/@dmahugh_70618/deploying-a-flask-app-to-google-app-engine-faa883b5ffab][Deploying a Flask app to Google App Engine | by Doug Mahugh | Medium]].

* Learning in python
#+begin_src python
  from textgenrnn import textgenrnn

  textgen = textgenrnn()
  textgen.train_from_file('wodehouse-characters-su.txt', num_epochs=10)

  textgen.generate_samples()

  textgen.generate(temperature=0.7)
#+end_src

Training from file:
#+begin_src python
textgen.train_from_file('wodehouse-characters-su.txt', header=False, num_epochs=10)
#+end_src

* Connecting React frontend to flask backend
See [[https://dev.to/ondiek/connecting-a-react-frontend-to-a-flask-backend-h1o][How to Connect a React Frontend to a Flask Backend - DEV Community]].

Don't need to use React's ~useEffect~ hook system (as most blogs and articles on
interfacing React with Flask backends instruct), since the api simply supplies a
new entry to be added to state. React updates when state is changed, but does
not need to check for updates from the API, since that is fully handled by the
button being clicked. See [[https://react.dev/learn/you-might-not-need-an-effect][You Might Not Need an Effect â€“ React]]. Instead, simply
make a request as part of the handling of the click, and use this to update
state, giving React the information it needs to keep the interface updated.

When running as a dev environment, there is a problem accessing the API because
of Access-Control-Allow-Origin. The solution is to use Flask-CORS (Cross Origin
Resource Sharing). This shouldn't be needed when running in production.

* Art Deco style
Colours:
| Colour      | Hex code |   R |   G |   B |   C |   M |   Y |   K |
|-------------+----------+-----+-----+-----+-----+-----+-----+-----|
| Vanilla     | #FFF4EO  | 255 | 244 | 244 | 004 | 013 | 032 | 000 |
| Yellow      | #F7BC1C  | 247 | 188 | 028 | 000 | 032 | 095 | 000 |
| Orange      | #F36724  | 243 | 103 | 036 | 003 | 092 | 100 | 000 |
| Red         | #A30604  | 163 | 006 | 004 | 026 | 096 | 086 | 024 |
| Green       | #90843C  | 144 | 132 | 060 | 042 | 045 | 098 | 017 |
| Blue        | #7DACAD  | 125 | 172 | 173 | 053 | 023 | 029 | 000 |
| Navy        | #283D5F  | 040 | 061 | 095 | 100 | 069 | 024 | 007 |
| Deep Purple | #2F1D28  | 047 | 029 | 040 | 083 | 084 | 049 | 060 |
| Black       | #000000  | 000 | 000 | 000 | 000 | 000 | 000 | 100 |
| White       | #FFFFFF  | 255 | 255 | 255 | 000 | 000 | 000 | 000 |

